pipeline{
    agent any
    tools{
        // git 'git'
        maven 'maven'
    }
    triggers{
        githubPush()
    }
    stages{
        stage("git-checkout"){
            steps{
                git branch: 'master', credentialsId: 'git-creds', url: 'https://github.com/gowdasagar06/Jenkins-EKS-deployment.git'
            }
        }
        stage("build"){
            steps{
                sh 'mvn clean package'
            }
        }
        stage("stash"){
            steps{
                stash(name:'war_file' , includes:'**/*.war , files/*')
            }
        }
        stage("unstash"){
            agent{
                label 'slave-1'
            }
            steps{
                unstash(name:'war_file')
            }
        }
        stage("docker-build"){
            agent{
                label 'slave-1'
            }
            steps{
                sh 'sudo docker build -t tomcat -f files/Dockerfile .'
                sh '''
                    aws ecr get-login-password --region ap-south-1 | sudo docker login --username AWS --password-stdin 391964367856.dkr.ecr.ap-south-1.amazonaws.com
                    sudo docker tag tomcat:latest 391964367856.dkr.ecr.ap-south-1.amazonaws.com/tomcat-jenkins-eks-deploy:$BUILD_TAG
                    sudo docker push 391964367856.dkr.ecr.ap-south-1.amazonaws.com/tomcat-jenkins-eks-deploy:$BUILD_TAG
                    sudo docker rmi 391964367856.dkr.ecr.ap-south-1.amazonaws.com/tomcat-jenkins-eks-deploy:$BUILD_TAG
                '''
                //be specific on the java-app part becouse this should match with your repo name or else docker push will show retrying error
            }
        }
        stage("deploy-to-eks"){
            agent{
                label 'slave-1'
            }
            steps{
                sh '''
                    export IMAGE=391964367856.dkr.ecr.ap-south-1.amazonaws.com/tomcat-jenkins-eks-deploy:$BUILD_TAG
                    envsubst < files/deployment.yml > files/deploy.yml
                    aws eks update-kubeconfig --name sagar-cluster --region ap-south-1
                    kubectl apply -f files/deploy.yml
                    kubectl apply -f files/service.yml
                '''
            }
        }
    }
}
